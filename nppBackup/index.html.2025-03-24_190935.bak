<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SvenskaLearn</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f4f7f6;
        }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
		
		#cardBack {
            margin-top: 40px; /* Add significant space before translations */
            padding-top: 20px; /* Additional padding at the top */
            border-top: 1px solid #eee; /* Optional: adds a subtle separator */
        }
		
		.card-shadow {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        /* Make the card container wider to accommodate GIFs better */
        .flashcard {
            min-height: 300px;
            max-width: 600px;
            margin: 20px auto;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }

        .file-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
            padding: 20px;
            background-color: #e9ecef;
            border-radius: 8px;
        }

        button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        .form-group {
            margin: 10px 0;
        }

        input, textarea {
            width: 100%;
            padding: 8px;
            margin-top: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .stats {
            text-align: center;
            margin-bottom: 20px;
        }

        #fileHandle {
            font-style: italic;
            color: #666;
            margin: 10px 0;
            text-align: center;
        }

        .card-section {
            margin: 15px 0; /* Increase spacing between sections */
            padding: 5px 0;
        }
		
		.gif-container {
            width: 100%;
            max-width: 480px;
            margin: 10px auto;
        }
        
        .gif-wrapper {
            width: 100%;
            height: 0;
            padding-bottom: 100%;
            position: relative;
            margin-bottom: 30px; /* Add space after the GIF container */
        }
        
        .gif-wrapper iframe {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
        }
        
        .gif-attribution {
            text-align: center;
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
		
		gif-container p {
            margin-bottom: 30px; /* Add space after the attribution */
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="stats">
            <body class="bg-gray-100 min-h-screen flex flex-col items-center">
    <div class="container mx-auto px-4 py-8 max-w-2xl">
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h1 class="text-3xl font-bold text-center text-blue-600 mb-4">Swedish Flashcards</h1>
            
            <div class="flex justify-between items-center mb-4">
                <div class="text-gray-600">
                    Cards due: <span id="dueCount" class="font-bold">0</span>
                </div>
                <div class="flex items-center space-x-2">
                    <label for="cardDirection" class="text-sm text-gray-700">Card Direction:</label>
                    <select id="cardDirection" class="form-select border rounded px-2 py-1">
                        <option value="swedish-english">Swedish → English</option>
                        <option value="english-swedish">English → Swedish</option>
                        <option value="random">Random</option>
                    </select>
                </div>
            </div>

        <div class="file-controls flex justify-center space-x-4 mb-4">
                <button onclick="openFile()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition">
                    Open Flashcards
                </button>
                <button onclick="createNewFile()" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded transition">
                    New Flashcards
                </button>
                <button onclick="saveFile()" id="saveButton" disabled class="bg-gray-500 text-white px-4 py-2 rounded opacity-50 cursor-not-allowed">
                    Save Changes
                </button>
            </div>

            <div id="fileHandle" class="text-center text-gray-500 italic mb-4">
                No file selected
            </div>

        <div id="flashcardContainer" class="bg-white border rounded-lg p-6 mb-4 min-h-[300px] flex flex-col justify-center items-center card-shadow">
                <div id="cardFront" class="text-center">
                    <div id="mainWord" class="text-2xl font-semibold text-blue-700 mb-4"></div>
                    <div id="visualDesc" class="text-gray-600 mb-4"></div>
                    <div id="exampleSentence" class="italic text-gray-500"></div>
                </div>
                <div id="cardBack" class="text-center" style="display: none;">
                    <div id="translatedWord" class="text-2xl font-semibold text-green-700 mb-4"></div>
                    <div id="translatedSentence" class="italic text-gray-500"></div>
                </div>
            </div>

        <div class="controls flex justify-center space-x-4 mb-4">
                <button onclick="showAnswer()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded transition">
                    Show Answer
                </button>
                <div id="ratingButtons" style="display: none;">
                    <button onclick="rateCard(1)" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded mr-2">Again</button>
                    <button onclick="rateCard(2)" class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded mr-2">Hard</button>
                    <button onclick="rateCard(3)" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded mr-2">Good</button>
                    <button onclick="rateCard(4)" class="bg-blue-500 hover:bg-blue-700 text-white px-4 py-2 rounded">Easy</button>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-xl font-semibold mb-4 text-blue-600">Add New Card</h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block text-gray-700 mb-2" for="swedish">Swedish:</label>
                    <input type="text" id="swedish" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-gray-700 mb-2" for="english">English:</label>
                    <input type="text" id="english" class="w-full border rounded px-3 py-2" required>
                </div>
            </div>
            <div class="mt-4">
                <label class="block text-gray-700 mb-2" for="visual">Visual Description:</label>
                <input type="text" id="visual" class="w-full border rounded px-3 py-2" placeholder="Optional description">
            </div>
            <div class="mt-4">
                <label class="block text-gray-700 mb-2" for="gifEmbed">GIF Embed Code:</label>
                <textarea id="gifEmbed" class="w-full border rounded px-3 py-2" placeholder="Optional Giphy embed code"></textarea>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                    <label class="block text-gray-700 mb-2" for="sentence">Example Sentence:</label>
                    <textarea id="sentence" class="w-full border rounded px-3 py-2"></textarea>
                </div>
                <div>
                    <label class="block text-gray-700 mb-2" for="translation">Sentence Translation:</label>
                    <textarea id="translation" class="w-full border rounded px-3 py-2"></textarea>
                </div>
            </div>
            <div class="mt-4 text-center">
                <button onclick="addCard()" class="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded transition">
                    Add Card
                </button>
            </div>
        </div>
    </div>

    <script>
        class FlashcardSystem {
            constructor() {
                this.cards = [];
                this.currentCard = null;
                this.fileHandle = null;
                this.hasUnsavedChanges = false;
                this.loadFromLocalStorage();
            }

            loadFromLocalStorage() {
                const savedState = localStorage.getItem('flashcardState');
                if (savedState) {
                    const state = JSON.parse(savedState);
                    this.cards = state.cards || [];
                }
            }

            saveToLocalStorage() {
                const state = {
                    cards: this.cards
                };
                localStorage.setItem('flashcardState', JSON.stringify(state));
            }

            addCard(card) {
                const newCard = {
                    id: Date.now().toString(),
                    ...card,
                    nextReview: new Date().toISOString(),
                    interval: 1,
                    reviewCount: 0
                };
                this.cards.push(newCard);
                this.hasUnsavedChanges = true;
                this.saveToLocalStorage();
                document.getElementById('saveButton').disabled = false;
            }

            getDueCards() {
                const now = new Date();
                return this.cards.filter(card => new Date(card.nextReview) <= now);
            }

            updateCardInterval(cardId, performance) {
                const card = this.cards.find(c => c.id === cardId);
                if (!card) return;

                const intervals = {
                    1: 1,     // Again: 1 day
                    2: card.interval * 1.2,  // Hard: slight increase
                    3: card.interval * 1.5,  // Good: moderate increase
                    4: card.interval * 2     // Easy: double the interval
                };

                const newInterval = intervals[performance] || card.interval;
                const nextReview = new Date();
                nextReview.setDate(nextReview.getDate() + Math.round(newInterval));

                card.interval = newInterval;
                card.nextReview = nextReview.toISOString();
                card.reviewCount++;

                this.hasUnsavedChanges = true;
                this.saveToLocalStorage();
                document.getElementById('saveButton').disabled = false;
            }
			
			// New method to handle merging cards
            mergeCards(loadedCards) {
                // Create a map of existing cards by content (using swedish as unique identifier)
                const existingCardsMap = new Map(
                    this.cards.map(card => [card.swedish, card])
                );
				
				// Process loaded cards
                this.cards = loadedCards.map(loadedCard => {
                    const existingCard = existingCardsMap.get(loadedCard.swedish);
                    
                    if (existingCard) {
                        // If card exists, preserve review metadata
                        return {
                            ...loadedCard,
                            nextReview: existingCard.nextReview,
                            interval: existingCard.interval,
                            reviewCount: existingCard.reviewCount
                        };
                    } else {
                        // If it's a new card, initialize review metadata
                        return {
                            ...loadedCard,
                            nextReview: new Date().toISOString(),
                            interval: 1,
                            reviewCount: 0
                        };
                    }
                });

                this.saveToLocalStorage();
            }
        }


        const system = new FlashcardSystem();
        let isShowingAnswer = false;
        let cardDirection = 'swedish-english';

        document.getElementById('cardDirection').addEventListener('change', (e) => {
            cardDirection = e.target.value;
            updateUI();
        });

        async function openFile() {
            try {
                const [fileHandle] = await window.showOpenFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                });
                
                system.fileHandle = fileHandle;
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                
                const file = await fileHandle.getFile();
                const contents = await file.text();
                const loadedCards = JSON.parse(contents);
                
                // Use the new mergeCards method
                system.mergeCards(loadedCards);
                
                document.getElementById('saveButton').disabled = false;
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error opening file:', err);
                    alert('Error opening file');
                }
            }
        }

        async function createNewFile() {
            try {
                const fileHandle = await window.showSaveFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                    suggestedName: 'flashcards.json'
                });
                
                system.fileHandle = fileHandle;
                system.cards = [];
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                document.getElementById('saveButton').disabled = false;
                
                await saveFile();
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error creating file:', err);
                    alert('Error creating file');
                }
            }
        }

        async function saveFile() {
            try {
                if (!system.fileHandle) {
                    throw new Error('No file selected');
                }

                const contents = JSON.stringify(system.cards, null, 2);
                const writable = await system.fileHandle.createWritable();
                await writable.write(contents);
                await writable.close();
                
                system.hasUnsavedChanges = false;
                document.getElementById('saveButton').disabled = true;
            } catch (err) {
                console.error('Error saving file:', err);
                alert('Error saving file');
            }
        }

        function updateUI() {
            const dueCards = system.getDueCards();
            document.getElementById('dueCount').textContent = dueCards.length;

            if (dueCards.length > 0) {
                system.currentCard = dueCards[Math.floor(Math.random() * dueCards.length)];
                showCard();
            } else {
                document.getElementById('swedishWord').textContent = "No cards due for review!";
                document.getElementById('visualDesc').textContent = "";
                document.getElementById('swedishSentence').textContent = "";
                document.getElementById('cardBack').style.display = "none";
                hideAnswerButtons();
            }
        }
		
		function determineCardDisplay(card) {
            switch(cardDirection) {
                case 'swedish-english':
                    return {
                        mainWord: card.swedish,
                        translatedWord: card.english,
                        mainSentence: card.sentence,
                        translatedSentence: card.translation
                    };
                case 'english-swedish':
                    return {
                        mainWord: card.english,
                        translatedWord: card.swedish,
                        mainSentence: card.translation,
                        translatedSentence: card.sentence
                    };
                case 'random':
                    return Math.random() > 0.5 
                        ? determineCardDisplay(card, 'swedish-english')
                        : determineCardDisplay(card, 'english-swedish');
                default:
                    return determineCardDisplay(card, 'swedish-english');
            }
        }

        function showCard() {
            const card = system.currentCard;
            const display = determineCardDisplay(card);
            
            let visualContent = '';
if (card.gifEmbed) {
    visualContent += 
        '<div class="gif-container w-full max-w-md mx-auto mb-4">' +
        '    <div class="gif-wrapper relative w-full" style="padding-bottom: 100%;">' +
        card.gifEmbed +
        '    </div>' +
        '</div>';
}
if (card.visual) {
    visualContent += '<div class="text-gray-600 text-sm">' + card.visual + '</div>';
}
            
            document.getElementById('mainWord').textContent = display.mainWord;
            document.getElementById('visualDesc').innerHTML = visualContent;
            document.getElementById('exampleSentence').textContent = display.mainSentence || '';
            
            document.getElementById('translatedWord').textContent = display.translatedWord;
            document.getElementById('translatedSentence').textContent = display.translatedSentence || '';
            
            document.getElementById('cardBack').style.display = "none";
            document.querySelector('button[onclick="showAnswer()"]').style.display = "block";
            document.getElementById('ratingButtons').style.display = "none";
            isShowingAnswer = false;
        }


        function showAnswer() {
            document.getElementById('cardBack').style.display = "block";
            document.querySelector('button[onclick="showAnswer()"]').style.display = "none";
            showAnswerButtons();
            isShowingAnswer = true;
        }

        function hideAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.style.display = "none");
        }

        function showAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.style.display = "block");
        }

        function rateCard(rating) {
            system.updateCardInterval(system.currentCard.id, rating);
            updateUI();
        }

        function addCard() {
            const swedish = document.getElementById('swedish').value;
            const english = document.getElementById('english').value;
            const visual = document.getElementById('visual').value;
            const gifEmbed = document.getElementById('gifEmbed').value;
            const sentence = document.getElementById('sentence').value;
            const translation = document.getElementById('translation').value;

            if (!swedish || !english) {
                alert('Swedish and English fields are required!');
                return;
            }

            system.addCard({
                swedish,
                english,
                visual,
                gifEmbed,
                sentence,
                translation
            });

            // Clear form
            document.getElementById('swedish').value = '';
            document.getElementById('english').value = '';
            document.getElementById('visual').value = '';
            document.getElementById('gifEmbed').value = '';
            document.getElementById('sentence').value = '';
            document.getElementById('translation').value = '';

            updateUI();
        }

        window.addEventListener('beforeunload', (e) => {
            if (system.hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        updateUI();
    </script>
</body>
</html>