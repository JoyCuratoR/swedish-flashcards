<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swedish Flashcards</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
		
		#cardBack {
            margin-top: 40px; /* Add significant space before translations */
            padding-top: 20px; /* Additional padding at the top */
            border-top: 1px solid #eee; /* Optional: adds a subtle separator */
        }

        /* Make the card container wider to accommodate GIFs better */
        .flashcard {
            min-height: 300px;
            max-width: 600px;
            margin: 20px auto;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
        }

        .file-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin: 20px 0;
            padding: 20px;
            background-color: #e9ecef;
            border-radius: 8px;
        }

        button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            background-color: #007bff;
            color: white;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        .form-group {
            margin: 10px 0;
        }

        input, textarea {
            width: 100%;
            padding: 8px;
            margin-top: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .stats {
            text-align: center;
            margin-bottom: 20px;
        }

        #fileHandle {
            font-style: italic;
            color: #666;
            margin: 10px 0;
            text-align: center;
        }

        .card-section {
            margin: 15px 0; /* Increase spacing between sections */
            padding: 5px 0;
        }
		
		.gif-container {
            width: 100%;
            max-width: 480px;
            margin: 10px auto;
        }
        
        .gif-wrapper {
            width: 100%;
            height: 0;
            padding-bottom: 100%;
            position: relative;
            margin-bottom: 30px; /* Add space after the GIF container */
        }
        
        .gif-wrapper iframe {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
        }
        
        .gif-attribution {
            text-align: center;
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
		
		gif-container p {
            margin-bottom: 30px; /* Add space after the attribution */
        }
    </style>
</head>
<body>
    <div id="app">
        <div class="stats">
            <h2>Swedish Flashcards</h2>
            <p>Cards due for review: <span id="dueCount">0</span></p>
        </div>

        <div class="file-controls">
            <button onclick="openFile()">Open Flashcards File</button>
            <button onclick="createNewFile()">Create New Flashcards File</button>
            <button onclick="saveFile()" id="saveButton" disabled>Save Changes</button>
        </div>
        <div id="fileHandle">No file selected</div>

        <div id="flashcardContainer" class="card flashcard">
            <div id="cardFront">
                <div class="card-section" id="swedishWord"></div>
                <div class="card-section" id="visualDesc"></div>
                <div class="card-section" id="swedishSentence"></div>
            </div>
            <div id="cardBack" style="display: none;">
                <div class="card-section" id="englishWord"></div>
                <div class="card-section" id="englishSentence"></div>
            </div>
        </div>

        <div class="controls">
            <button onclick="showAnswer()">Show Answer</button>
            <button onclick="rateCard(1)" style="display: none;">Again</button>
            <button onclick="rateCard(2)" style="display: none;">Hard</button>
            <button onclick="rateCard(3)" style="display: none;">Good</button>
            <button onclick="rateCard(4)" style="display: none;">Easy</button>
        </div>

        <div class="card">
        <h3>Add New Card</h3>
        <div class="form-group">
            <label for="swedish">Swedish:</label>
            <input type="text" id="swedish" required>
        </div>
        <div class="form-group">
            <label for="english">English:</label>
            <input type="text" id="english" required>
        </div>
        <div class="form-group">
            <label for="visual">Visual Description:</label>
            <input type="text" id="visual" placeholder="Text description (optional)">
        </div>
        <div class="form-group">
            <label for="gifEmbed">GIF Embed Code:</label>
            <textarea id="gifEmbed" placeholder="Paste Giphy embed code here (optional)"></textarea>
        </div>
        <div class="form-group">
            <label for="sentence">Example Sentence:</label>
            <textarea id="sentence"></textarea>
        </div>
        <div class="form-group">
            <label for="translation">Sentence Translation:</label>
            <textarea id="translation"></textarea>
        </div>
        <button onclick="addCard()">Add Card</button>
    </div>
    </div>

    <script>
        class FlashcardSystem {
            constructor() {
                this.cards = [];
                this.currentCard = null;
                this.fileHandle = null;
                this.hasUnsavedChanges = false;
                this.loadFromLocalStorage();
            }

            loadFromLocalStorage() {
                const savedState = localStorage.getItem('flashcardState');
                if (savedState) {
                    const state = JSON.parse(savedState);
                    this.cards = state.cards || [];
                }
            }

            saveToLocalStorage() {
                const state = {
                    cards: this.cards
                };
                localStorage.setItem('flashcardState', JSON.stringify(state));
            }

            addCard(card) {
                const newCard = {
                    id: Date.now().toString(),
                    ...card,
                    nextReview: new Date().toISOString(),
                    interval: 1,
                    reviewCount: 0
                };
                this.cards.push(newCard);
                this.hasUnsavedChanges = true;
                this.saveToLocalStorage();
                document.getElementById('saveButton').disabled = false;
            }

            getDueCards() {
                const now = new Date();
                return this.cards.filter(card => new Date(card.nextReview) <= now);
            }

            updateCardInterval(cardId, performance) {
                const card = this.cards.find(c => c.id === cardId);
                if (!card) return;

                const intervals = {
                    1: 1,     // Again: 1 day
                    2: card.interval * 1.2,  // Hard: slight increase
                    3: card.interval * 1.5,  // Good: moderate increase
                    4: card.interval * 2     // Easy: double the interval
                };

                const newInterval = intervals[performance] || card.interval;
                const nextReview = new Date();
                nextReview.setDate(nextReview.getDate() + Math.round(newInterval));

                card.interval = newInterval;
                card.nextReview = nextReview.toISOString();
                card.reviewCount++;

                this.hasUnsavedChanges = true;
                this.saveToLocalStorage();
                document.getElementById('saveButton').disabled = false;
            }
			
			// New method to handle merging cards
            mergeCards(loadedCards) {
                // Create a map of existing cards by content (using swedish as unique identifier)
                const existingCardsMap = new Map(
                    this.cards.map(card => [card.swedish, card])
                );
				
				// Process loaded cards
                this.cards = loadedCards.map(loadedCard => {
                    const existingCard = existingCardsMap.get(loadedCard.swedish);
                    
                    if (existingCard) {
                        // If card exists, preserve review metadata
                        return {
                            ...loadedCard,
                            nextReview: existingCard.nextReview,
                            interval: existingCard.interval,
                            reviewCount: existingCard.reviewCount
                        };
                    } else {
                        // If it's a new card, initialize review metadata
                        return {
                            ...loadedCard,
                            nextReview: new Date().toISOString(),
                            interval: 1,
                            reviewCount: 0
                        };
                    }
                });

                this.saveToLocalStorage();
            }
        }


        const system = new FlashcardSystem();
        let isShowingAnswer = false;

        async function openFile() {
            try {
                const [fileHandle] = await window.showOpenFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                });
                
                system.fileHandle = fileHandle;
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                
                const file = await fileHandle.getFile();
                const contents = await file.text();
                const loadedCards = JSON.parse(contents);
                
                // Use the new mergeCards method
                system.mergeCards(loadedCards);
                
                document.getElementById('saveButton').disabled = false;
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error opening file:', err);
                    alert('Error opening file');
                }
            }
        }

        async function createNewFile() {
            try {
                const fileHandle = await window.showSaveFilePicker({
                    types: [{
                        description: 'Flashcards JSON File',
                        accept: {'application/json': ['.json']},
                    }],
                    suggestedName: 'flashcards.json'
                });
                
                system.fileHandle = fileHandle;
                system.cards = [];
                document.getElementById('fileHandle').textContent = 
                    `Current file: ${fileHandle.name}`;
                document.getElementById('saveButton').disabled = false;
                
                await saveFile();
                updateUI();
            } catch (err) {
                if (err.name !== 'AbortError') {
                    console.error('Error creating file:', err);
                    alert('Error creating file');
                }
            }
        }

        async function saveFile() {
            try {
                if (!system.fileHandle) {
                    throw new Error('No file selected');
                }

                const contents = JSON.stringify(system.cards, null, 2);
                const writable = await system.fileHandle.createWritable();
                await writable.write(contents);
                await writable.close();
                
                system.hasUnsavedChanges = false;
                document.getElementById('saveButton').disabled = true;
            } catch (err) {
                console.error('Error saving file:', err);
                alert('Error saving file');
            }
        }

        function updateUI() {
            const dueCards = system.getDueCards();
            document.getElementById('dueCount').textContent = dueCards.length;

            if (dueCards.length > 0) {
                system.currentCard = dueCards[Math.floor(Math.random() * dueCards.length)];
                showCard();
            } else {
                document.getElementById('swedishWord').textContent = "No cards due for review!";
                document.getElementById('visualDesc').textContent = "";
                document.getElementById('swedishSentence').textContent = "";
                document.getElementById('cardBack').style.display = "none";
                hideAnswerButtons();
            }
        }

        function showCard() {
            const card = system.currentCard;
            
            // Front of card
            let visualContent = '';
if (card.gifEmbed) {
    visualContent += '<div class="gif-container">' +
                    '<div class="gif-wrapper">' +
                    card.gifEmbed +
                    '</div>' +
                    '</div>';
}
            if (card.visual) {
                visualContent += '<div class="card-section">Visual: ' + card.visual + '</div>';
            }
            
            document.getElementById('swedishWord').textContent = `Swedish: ${card.swedish}`;
            document.getElementById('visualDesc').innerHTML = visualContent;
            document.getElementById('swedishSentence').textContent = card.sentence ? `Sentence: ${card.sentence}` : '';
            
            // Back of card
            document.getElementById('englishWord').textContent = `English: ${card.english}`;
            document.getElementById('englishSentence').textContent = card.translation ? `Translation: ${card.translation}` : '';
            
            document.getElementById('cardBack').style.display = "none";
            document.querySelector('button[onclick="showAnswer()"]').style.display = "block";
            hideAnswerButtons();
            isShowingAnswer = false;
        }


        function showAnswer() {
            document.getElementById('cardBack').style.display = "block";
            document.querySelector('button[onclick="showAnswer()"]').style.display = "none";
            showAnswerButtons();
            isShowingAnswer = true;
        }

        function hideAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.style.display = "none");
        }

        function showAnswerButtons() {
            const buttons = document.querySelectorAll('button[onclick^="rateCard"]');
            buttons.forEach(button => button.style.display = "block");
        }

        function rateCard(rating) {
            system.updateCardInterval(system.currentCard.id, rating);
            updateUI();
        }

        function addCard() {
            const swedish = document.getElementById('swedish').value;
            const english = document.getElementById('english').value;
            const visual = document.getElementById('visual').value;
            const gifEmbed = document.getElementById('gifEmbed').value;
            const sentence = document.getElementById('sentence').value;
            const translation = document.getElementById('translation').value;

            if (!swedish || !english) {
                alert('Swedish and English fields are required!');
                return;
            }

            system.addCard({
                swedish,
                english,
                visual,
                gifEmbed,
                sentence,
                translation
            });

            // Clear form
            document.getElementById('swedish').value = '';
            document.getElementById('english').value = '';
            document.getElementById('visual').value = '';
            document.getElementById('gifEmbed').value = '';
            document.getElementById('sentence').value = '';
            document.getElementById('translation').value = '';

            updateUI();
        }

        window.addEventListener('beforeunload', (e) => {
            if (system.hasUnsavedChanges) {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        updateUI();
    </script>
</body>
</html>